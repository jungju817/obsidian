{
	"nodes":[
		{"id":"df8db6c51163bcfe","type":"text","text":"### total code\n\n```c\nint __cdecl ftext(int argc, const char **argv, const char **envp)\n{\n  const char *v4; // $s4\n  char *v5; // $s3\n  char *v6; // $v0\n  int v7; // $s0\n  int v8; // $s2\n  int i; // $s2\n  int v10; // $v0\n  int j; // $s5\n  int v12; // $s5\n  int v13; // $a0\n  int v14; // $v0\n  int v15; // $s5\n  int v16; // $v1\n  int v17; // $s5\n  int v18; // $a0\n  int v19; // $a0\n  int v20; // $a1\n  char *v21; // $a2\n  int *v22; // $a0\n  int isEmptyObj; // $v0\n  int v24; // $fp\n  int v25; // $s2\n  int k; // $s2\n  char *v27; // $v0\n  char *v28; // $v0\n  int v29; // $s2\n  int v30; // $s5\n  int n; // $s4\n  int v32; // $a3\n  int v33; // $v0\n  int v34; // $v1\n  int v35; // $t9\n  int m; // $s4\n  int v37; // $s4\n  int v38; // $v0\n  const char *v39; // $v0\n  const char *v40; // $v0\n  const char *v41; // $v0\n  const char *v42; // $v0\n  unsigned int v43; // $v0\n  char *v44; // $v0\n  const char *v45; // $v0\n  const char *v46; // $v0\n  const char *v47; // $v0\n  const char *v48; // $v0\n  int v49; // $a0\n  const char *ErrorString; // $v0\n  const char *v51; // $v0\n  int v52; // $a0\n  unsigned int v53; // $s0\n  unsigned int v54; // $s1\n  const char *v56; // [sp+14h] [-2ACh]\n  const char *v57; // [sp+14h] [-2ACh]\n  double v58; // [sp+18h] [-2A8h]\n  double v59; // [sp+20h] [-2A0h]\n  double v60; // [sp+28h] [-298h]\n  _BYTE v61[256]; // [sp+38h] [-288h] BYREF\n  struct stat v62; // [sp+138h] [-188h] BYREF\n  char v63[128]; // [sp+1D0h] [-F0h] BYREF\n  int v64[5]; // [sp+250h] [-70h] BYREF\n  int v65; // [sp+264h] [-5Ch]\n  int v66[5]; // [sp+268h] [-58h] BYREF\n  int v67; // [sp+27Ch] [-44h]\n  int v68[3]; // [sp+280h] [-40h] BYREF\n  int v69; // [sp+28Ch] [-34h]\n  int v70; // [sp+290h] [-30h]\n  int v71; // [sp+294h] [-2Ch]\n  struct timespec v72; // [sp+298h] [-28h] BYREF\n  struct timespec v73; // [sp+2A0h] [-20h] BYREF\n  char *s[2]; // [sp+2A8h] [-18h] BYREF\n  char *src; // [sp+2B0h] [-10h]\n  int *v76; // [sp+2B4h] [-Ch]\n  int v77; // [sp+2B8h] [-8h]\n  int v78; // [sp+2BCh] [-4h]\n\n  unwebcgiLogLevel = 7;\n  v73.tv_sec = 0;\n  v73.tv_nsec = 0;\n  v72.tv_sec = 0;\n  v72.tv_nsec = 0;\n  clock_gettime(0, &v73);\n  v4 = *argv;\n  v5 = strrchr(*argv, 47);\n  if ( !v5 )\n  {\n    if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n    {\n      if ( (unwebcgiLogType & 1) != 0 )\n        syslog(3, \"webcgi{%s, %d}:Invalid Post Format: %s\\n\", \"main\", 1615, v4);\n      if ( (unwebcgiLogType & 2) != 0 )\n        sub_3858(\"\\x1B[38;5;214m\", \"ERROR\", \"webcgi{%s, %d}:Invalid Post Format: %s\\n\", \"main\", 1615, *argv);\n    }\n    return 0;\n  }\n  v6 = getenv(\"REQUEST_METHOD\");\n  if ( v6 && !strcmp(v6, \"GET\") && !strcmp(v5, \"/cgi_set\") )\n  {\n    printf(\"%s%c%c\\n\", \"Content-Type:text/html;charset=iso-8859-1\", 13, 10);\n    puts(\"<strong style=\\\"color: red;\\\">Nice Try!!Not allowed.Please use web pages</strong>\");\n    return 0;\n  }\n  LOGPROFILE = !stat(\"/opt/lantiq/etc/profile.log\", &v62) && (v62.st_nlink & 0xF000) == 0x8000;\n  if ( strcmp(v5, \"/cgi_set\") )\n  {\n    if ( !strcmp(v5, \"/cgi_action\") )\n    {\n      sub_502C();\n      goto LABEL_301;\n    }\n    if ( !strcmp(v5, \"/cgi_get\") )\n      goto LABEL_278;\n    if ( !strcmp(v5, \"/cgi_get_nosubobj\") || !strcmp(v5, \"/cgi_get_fillparams\") || !strcmp(v5, \"/cgi_get_subobjvals\") )\n      goto LABEL_273;\n    if ( !strcmp(v5, \"/cgi_get_filterbyparamval\") )\n    {\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\");\nLABEL_278:\n      v52 = 4100;\n      goto LABEL_286;\n    }\n    if ( strcmp(v5, \"/cgi_get_filterbyparamvalnosubobj\") && strcmp(v5, \"/cgi_get_subobjvalsfilterbyparamval\") )\n    {\n      if ( strcmp(v5, \"/cgi_get_filterbyfirstparamval\") )\n      {\n        if ( strcmp(v5, \"/cgi_get_defval\") )\n        {\n          if ( strcmp(v5, \"/cgi_get_mountpaths\") )\n          {\n            if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n            {\n              if ( (unwebcgiLogType & 1) != 0 )\n                syslog(3, \"webcgi{%s, %d}:Invalid arg: %s\\n\", \"main\", 1676, *argv);\n              if ( (unwebcgiLogType & 2) != 0 )\n                sub_3858(\"\\x1B[38;5;214m\", \"ERROR\", \"webcgi{%s, %d}:Invalid arg: %s\\n\", \"main\", 1676, *argv);\n            }\n          }\n          else\n          {\n            dword_1D1EC = 1;\n            strcpy(v63, \"/mnt/usb/*/*/\");\n            if ( glob(v63, 0x2000, 0, (glob_t *)v61) )\n            {\n              puts(\"{\\n\\t\\\"Objects\\\": [\");\n              puts(\"\\t]\\n}\");\n            }\n            else\n            {\n              v53 = 0;\n              puts(\"{\\n\\t\\\"Objects\\\": [\");\n              while ( v53 < *(_DWORD *)v61 )\n              {\n                printf(\"\\t\\t{\\n\\t\\t\\t\\\"ObjName\\\": \\\"dirlist.mnt.usb.%d.\\\",\\n\\t\\t\\t\\\"Param\\\":[\\n\", v53);\n                printf(\n                  \"\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\\"ParamName\\\": \\\"path\\\",\\n\\t\\t\\t\\t\\\"ParamValue\\\": \\\"%s\\\"\\n\\t\\t\\t\\t}\\n\",\n                  *(const char **)(*(_DWORD *)&v61[4] + 4 * v53++));\n                printf(\"\\t\\t\\t]\\n\\t\\t}\");\n                if ( v53 == *(_DWORD *)v61 )\n                  putchar(10);\n                else\n                  puts(\",\");\n              }\n              puts(\"\\t]\\n}\");\n              globfree((glob_t *)v61);\n            }\n          }\n          goto LABEL_301;\n        }\n        puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n        v52 = 4416;\nLABEL_286:\n        sub_7998(v52);\n        goto LABEL_301;\n      }\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n      dword_1D1EC = 1;\n    }\n    else\n    {\nLABEL_273:\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n    }\n    v52 = 4352;\n    goto LABEL_286;\n  }\n  memset(v68, 0, sizeof(v68));\n  v69 = 0;\n  v70 = 0;\n  v71 = 0;\n  memset(v66, 0, sizeof(v66));\n  v67 = 0;\n  memset(v64, 0, sizeof(v64));\n  v65 = 0;\n  s[0] = 0;\n  memset(v61, 0, sizeof(v61));\n  memset(v63, 0, sizeof(v63));\n  v76 = v68;\n  sub_4B8C(v68, 2, 4);\n  v69 = 3;\n  v7 = sub_6AB4(v68, \"set\");\n  if ( v7 )\n    goto LABEL_119;\n  v8 = *(_DWORD *)(v71 + 668);\n  v77 = v71;\n  for ( i = v8 - 668; i != v77; i = *(_DWORD *)(i + 668) - 668 )\n  {\n    if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n    {\n      if ( (unwebcgiLogType & 1) != 0 )\n        syslog(6, \"webcgi{%s, %d}:Performing set action of object :%s\\n\", \"cgiSet\", 440, (const char *)i);\n      if ( (unwebcgiLogType & 2) != 0 )\n        sub_3858(\n          \"\\x1B[0m\",\n          \"INFO\",\n          \"webcgi{%s, %d}:Performing set action of object :%s\\n\",\n          \"cgiSet\",\n          440,\n          (const char *)i);\n    }\n    if ( strstr((const char *)i, \"openwrt.\") )\n    {\n      if ( (*(_DWORD *)(i + 260) & 2) != 0 )\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(6, \"webcgi{%s, %d}:Performing delete actoin of object :%s\\n\", \"cgiSet\", 443, (const char *)i);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\n              \"\\x1B[0m\",\n              \"INFO\",\n              \"webcgi{%s, %d}:Performing delete actoin of object :%s\\n\",\n              \"cgiSet\",\n              443,\n              (const char *)i);\n        }\n        v7 = openwrt_deleteConfig(i);\n        v10 = *(_DWORD *)(i + 260);\n      }\n      else\n      {\n        v10 = *(_DWORD *)(i + 260);\n      }\n      if ( (v10 & 5) != 0 )\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(6, \"webcgi{%s, %d}:Performing ADD/Modify action of object :%s\\n\", \"cgiSet\", 447, (const char *)i);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\n              \"\\x1B[0m\",\n              \"INFO\",\n              \"webcgi{%s, %d}:Performing ADD/Modify action of object :%s\\n\",\n              \"cgiSet\",\n              447,\n              (const char *)i);\n        }\n        memset(modifyObj, 0, (size_t)&unk_32204);\n        for ( j = *(_DWORD *)(i + 660); ; j = *(_DWORD *)(v12 + 392) )\n        {\n          v12 = j - 392;\n          if ( v12 + 392 == i + 660 )\n            break;\n          fbss = dword_13E3FC0;\n          src = (char *)(v12 + 256);\n          if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n          {\n            if ( (unwebcgiLogType & 1) != 0 )\n              syslog(6, \"webcgi{%s, %d}: %s : %s \\n\", \"cgiSet\", 452, (const char *)v12, (const char *)(v12 + 256));\n            if ( (unwebcgiLogType & 2) != 0 )\n              sub_3858(\"\\x1B[0m\", \"INFO\", \"webcgi{%s, %d}: %s : %s \\n\", \"cgiSet\", 452, (const char *)v12, src);\n          }\n          v78 = fbss;\n          strcpy(&modifyObj[1024 * fbss + 512], (const char *)v12);\n          strcpy(&modifyObj[1024 * v78 + 1024], src);\n          dword_13E3FC0 += (int)&stdout + 1;\n        }\n        if ( (*(_DWORD *)(i + 260) & 4) != 0 )\n        {\n          v13 = i;\n          if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n          {\n            if ( (unwebcgiLogType & 1) != 0 )\n              syslog(6, \"webcgi{%s, %d}:Performing Modify action for object :%s\\n\", \"cgiSet\", 459, (const char *)i);\n            if ( (unwebcgiLogType & 2) != 0 )\n              sub_3858(\n                \"\\x1B[0m\",\n                \"INFO\",\n                \"webcgi{%s, %d}:Performing Modify action for object :%s\\n\",\n                \"cgiSet\",\n                459,\n                (const char *)i);\n            v13 = i;\n          }\n          v14 = ((int (__fastcall *)(int, char *))openwrt_modifyConfig)(v13, modifyObj);\n          goto LABEL_61;\n        }\n        if ( (*(_DWORD *)(i + 260) & 1) != 0 )\n        {\n          if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n          {\n            if ( (unwebcgiLogType & 1) != 0 )\n              syslog(6, \"webcgi{%s, %d}:Performing Add for object :%s\\n\", \"cgiSet\", 462, (const char *)i);\n            if ( (unwebcgiLogType & 2) != 0 )\n              sub_3858(\n                \"\\x1B[0m\",\n                \"INFO\",\n                \"webcgi{%s, %d}:Performing Add for object :%s\\n\",\n                \"cgiSet\",\n                462,\n                (const char *)i);\n          }\n          v14 = ((int (__fastcall *)(int, char *))openwrt_addConfig)(i, modifyObj);\nLABEL_61:\n          v7 = v14;\n        }\n      }\n      openwrt = 1;\n      continue;\n    }\n  }\n  if ( openwrt )\n  {\n    sub_4B8C(v64, 2, 4);\n    sub_4E88(v65, v7, &byte_1D0EC);\n    help_getJsonFormat(v64, s);\n    printf(\"%s\", s[0]);\n    help_free(s[0], \"CGI/cgi.c\", 474);\n    goto LABEL_268;\n  }\n  if ( (unsigned int)(dword_1D1F4 - 1) < 2 )\n  {\n    v68[0] |= 0x100u;\n    if ( dword_1D1F4 == 1 )\n    {\n      sub_4C14(v63);\n      if ( !strcmp(v63, \"UPG_REQ\") )\n      {\n        dword_1D1F4 = 0;\n        goto LABEL_95;\n      }\n      sub_4B8C(v66, 258, 4);\n      help_copyCompleteObjList(v67, 4, v71);\n      v7 = cal_setValue(v66);\n    }\n    if ( v7 )\n    {\n      if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n      {\n        if ( (unwebcgiLogType & 1) != 0 )\n          syslog(3, \"webcgi{%s, %d}:Firmware Upgrade Request Failed !! cal_set nRet = %d\\n\", \"cgiSet\", 504, v7);\n        if ( (unwebcgiLogType & 2) != 0 )\n        {\n          sub_3858(\n            \"\\x1B[38;5;214m\",\n            \"ERROR\",\n            \"webcgi{%s, %d}:Firmware Upgrade Request Failed !! cal_set nRet = %d\\n\",\n            \"cgiSet\",\n            504,\n            v7);\n          goto LABEL_117;\n        }\n        dword_1D1F4 = 0;\n      }\n      else\n      {\n        dword_1D1F4 = 0;\n      }\n    }\n    else\n    {\n      v7 = sub_3E98(0);\n      if ( !v7 )\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(6, \"webcgi{%s, %d}:Firmware file download completed !!\\n\", \"cgiSet\", 497);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\"\\x1B[0m\", \"INFO\", \"webcgi{%s, %d}:Firmware file download completed !!\\n\", \"cgiSet\", 497);\n        }\n        goto LABEL_92;\n      }\n      if ( (unsigned __int16)unwebcgiLogLevel < 3u )\n      {\n        dword_1D1F4 = 0;\n        goto LABEL_119;\n      }\n      if ( (unwebcgiLogType & 1) != 0 )\n        syslog(3, \"webcgi{%s, %d}:Firmware file download failed !! nRet = %d\\n\", \"cgiSet\", 499, v7);\n      if ( (unwebcgiLogType & 2) == 0 )\n      {\n        dword_1D1F4 = 0;\n        goto LABEL_119;\n      }\n      sub_3858(\n        \"\\x1B[38;5;214m\",\n        \"ERROR\",\n        \"webcgi{%s, %d}:Firmware file download failed !! nRet = %d\\n\",\n        \"cgiSet\",\n        499,\n        v7);\nLABEL_117:\n      dword_1D1F4 = 0;\n    }\n    goto LABEL_119;\n  }\nLABEL_92:\n  if ( dword_1D1F0 != 1 )\n  {\nLABEL_118:\n    v7 = cal_setValue(v68);\n    goto LABEL_119;\n  }\n  sub_4C14(v63);\n  if ( !strcmp(v63, \"UPG_REQ\") )\n  {\n    dword_1D1F0 = 0;\nLABEL_95:\n    v7 = -1;\n    goto LABEL_119;\n  }\n  sub_4B8C(v66, 2, 4);\n  help_copyCompleteObjList(v67, 4, v71);\n  v7 = cal_setValue(v66);\n  if ( !v7 )\n  {\n    v7 = sub_3E98(1);\n    if ( v7 )\n    {\n      if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n      {\n        if ( (unwebcgiLogType & 1) != 0 )\n          syslog(3, \"webcgi{%s, %d}:Config file download failed !! nRet = %d\\n\", \"cgiSet\", 526, v7);\n        if ( (unwebcgiLogType & 2) != 0 )\n          sub_3858(\n            \"\\x1B[38;5;214m\",\n            \"ERROR\",\n            \"webcgi{%s, %d}:Config file download failed !! nRet = %d\\n\",\n            \"cgiSet\",\n            526,\n            v7);\n        dword_1D1F0 = 0;\n      }\n      else\n      {\n        dword_1D1F0 = 0;\n      }\n      goto LABEL_119;\n    }\n    if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n    {\n      if ( (unwebcgiLogType & 1) != 0 )\n        syslog(6, \"webcgi{%s, %d}:Config file download completed !!\\n\", \"cgiSet\", 524);\n      if ( (unwebcgiLogType & 2) != 0 )\n        sub_3858(\"\\x1B[0m\", \"INFO\", \"webcgi{%s, %d}:Config file download completed !!\\n\", \"cgiSet\", 524);\n    }\n    goto LABEL_118;\n  }\n  if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n  {\n    if ( (unwebcgiLogType & 1) != 0 )\n      syslog(3, \"webcgi{%s, %d}:Config update Request Failed !! cal_set nRet = %d\\n\", \"cgiSet\", 531, v7);\n    if ( (unwebcgiLogType & 2) != 0 )\n    {\n      sub_3858(\n        \"\\x1B[38;5;214m\",\n        \"ERROR\",\n        \"webcgi{%s, %d}:Config update Request Failed !! cal_set nRet = %d\\n\",\n        \"cgiSet\",\n        531,\n        v7);\n      goto LABEL_117;\n    }\n    dword_1D1F4 = 0;\n  }\n  else\n  {\n    dword_1D1F4 = 0;\n  }\nLABEL_119:\n  sub_4B8C(v64, 2, 4);\n  if ( dword_1D1F4 == 1 )\n  {\n    v15 = 0;\n    if ( !v7 )\n    {\n      if ( sub_4C14(v63) )\n        goto LABEL_120;\n      if ( !strcmp(v63, \"UPG_SUCC\") )\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 2u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(2, \"webcgi{%s, %d}:Firmware Upgrade Success -> System Going for Reboot !!\\n\", \"cgiSet\", 548);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\n              \"\\x1B[31m\",\n              \"CRITICAL\",\n              \"webcgi{%s, %d}:Firmware Upgrade Success -> System Going for Reboot !!\\n\",\n              \"cgiSet\",\n              548);\n        }\n        puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n        puts(\"Status: 200 OK\\n\");\n        sub_4E88(v65, 0, &byte_1D0EC);\n        help_getJsonFormat(v64, s);\n        puts(s[0]);\n        help_free(s[0], \"CGI/cgi.c\", 556);\n        sub_3840(v68);\n        sub_3840(v66);\n        sub_3840(v64);\n        system(\"reboot\");\n        goto LABEL_301;\n      }\n      if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n      {\n        if ( (unwebcgiLogType & 1) != 0 )\n          syslog(\n            3,\n            \"webcgi{%s, %d}:Firmware Upgrade Failed in the backend !! Current Status: %s nRet = %d\\n\",\n            \"cgiSet\",\n            563,\n            v63,\n            0);\n        if ( (unwebcgiLogType & 2) != 0 )\n          sub_3858(\n            \"\\x1B[38;5;214m\",\n            \"ERROR\",\n            \"webcgi{%s, %d}:Firmware Upgrade Failed in the backend !! Current Status: %s nRet = %d\\n\",\n            \"cgiSet\",\n            563,\n            v63,\n            0);\n      }\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n      v15 = 1;\n      puts(\"Status: 203 Non-Authoritative Information\\n\");\n    }\n  }\n  else\n  {\nLABEL_120:\n    v15 = 0;\n  }\n  if ( dword_1D1F0 == 1 )\n  {\n    if ( !v7 )\n    {\n      if ( sub_4C14(v63) )\n      {\n        v7 = 0;\n        goto LABEL_153;\n      }\n      if ( strcmp(v63, \"UPG_SUCC\") )\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(\n              3,\n              \"webcgi{%s, %d}:Configuration restore Failed in the backend !! Current Status: %s nRet = %d\\n\",\n              \"cgiSet\",\n              578,\n              v63,\n              0);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\n              \"\\x1B[38;5;214m\",\n              \"ERROR\",\n              \"webcgi{%s, %d}:Configuration restore Failed in the backend !! Current Status: %s nRet = %d\\n\",\n              \"cgiSet\",\n              578,\n              v63,\n              0);\n        }\n        puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n        v7 = 1;\n        puts(\"Status: 203 Non-Authoritative Information\\n\");\nLABEL_155:\n        v16 = dword_1D1F4;\n      }\n      else\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 2u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(2, \"webcgi{%s, %d}:Configuration restore Success -> System Going for Reboot !!\\n\", \"cgiSet\", 575);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\n              \"\\x1B[31m\",\n              \"CRITICAL\",\n              \"webcgi{%s, %d}:Configuration restore Success -> System Going for Reboot !!\\n\",\n              \"cgiSet\",\n              575);\n        }\n        v7 = 0;\n        scapi_reboot();\nLABEL_153:\n        v16 = dword_1D1F4;\n        if ( !v15 )\n        {\n          puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n          puts(\"Status: 200 OK\\n\");\n          goto LABEL_155;\n        }\n      }\n      v17 = v65;\n      if ( v16 == 1 || (v18 = v65, dword_1D1F0 == 1) )\n      {\n        if ( strcmp(v63, \"UPG_SUCC\") )\n        {\n          v19 = sub_4E4C(v17, &byte_1D0EC, 128);\n          if ( v7 )\n            help_addParamList(v19, \"\", 0, \" DB Restore Failed\", 0);\n          else\n            help_addParamList(v19, \"\", 0, \" Firmware Upgrade Failed\", 0);\n          goto LABEL_165;\n        }\n        v18 = v17;\n      }\n      v20 = 0;\n      v21 = &byte_1D0EC;\nLABEL_164:\n      sub_4E88(v18, v20, v21);\nLABEL_165:\n      v22 = v64;\n      goto LABEL_267;\n    }\n  }\n  else if ( !v7 )\n  {\n    goto LABEL_153;\n  }\n  isEmptyObj = help_isEmptyObj(v71);\n  v24 = v71;\n  if ( isEmptyObj != -1 )\n  {\n    if ( help_isEmptyObj(v71) || v7 >= 0 )\n    {\n      if ( help_isEmptyObj(v71) )\n        goto LABEL_266;\n      if ( v7 <= 0 )\n      {\n        v22 = v64;\n        goto LABEL_267;\n      }\n      if ( v15 )\n      {\n        v18 = v65;\n        goto LABEL_264;\n      }\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n      puts(\"Status: 207 Multi-Status\\n\");\n    }\n    else\n    {\n      if ( !v15 )\n      {\n        puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n        puts(\"Status: 203 Non-Authoritative Information\\n\");\n      }\n      if ( (unsigned __int16)unwebcgiLogLevel < 3u )\n      {\n        v18 = v65;\nLABEL_264:\n        v20 = v7;\n        v21 = (char *)v71;\n        goto LABEL_164;\n      }\n      if ( (unwebcgiLogType & 1) != 0 )\n      {\n        ErrorString = (const char *)getErrorString(v7);\n        syslog(3, \"webcgi{%s, %d}:Generic Set Failure: %s\\n\", \"cgiSet\", 702, ErrorString);\n      }\n      if ( (unwebcgiLogType & 2) == 0 )\n      {\n        v18 = v65;\n        goto LABEL_264;\n      }\n      v51 = (const char *)getErrorString(v7);\n      sub_3858(\"\\x1B[38;5;214m\", \"ERROR\", \"webcgi{%s, %d}:Generic Set Failure: %s\\n\", \"cgiSet\", 702, v51);\n    }\n    v18 = v65;\n    goto LABEL_264;\n  }\n  v25 = *(_DWORD *)(v71 + 668);\n  src = 0;\n  for ( k = v25 - 668; k != v24; k = v29 - 668 )\n  {\n    if ( *(_BYTE *)k && unSub == 1 )\n    {\n      snprintf(v61, 0x100u, \"%s\", (const char *)k);\n      if ( v61[strlen(v61) - 1] == 46 )\n      {\n        v27 = strrchr(v61, 46);\n        if ( v27 )\n          *v27 = 0;\n      }\n      v28 = strrchr(v61, 46);\n      if ( v28 )\n      {\n        if ( (unsigned __int8)(v28[1] - 48) < 0xAu )\n          v28[1] = 0;\n        snprintf((char *)k, 0x100u, \"%s\", v61);\n      }\n    }\n    if ( help_isEmptyObj(k) != -1 || v7 <= 0 )\n    {\n      v33 = help_isEmptyObj(k);\n      v77 = k + 660;\n      v34 = *(_DWORD *)(k + 660);\n      if ( v33 == -1 )\n      {\n        v35 = v77;\n        if ( v34 != v77 && v7 < 0 )\n        {\n          if ( !v15 )\n          {\n            puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n            puts(\"Status: 206 Partial Content\\n\");\n          }\n          for ( m = *(_DWORD *)(k + 660); ; m = *(_DWORD *)(v37 + 392) )\n          {\n            while ( 1 )\n            {\nLABEL_198:\n              v37 = m - 392;\n              if ( v77 == v37 + 392 )\n              {\n                src = (_BYTE *)(&stdout + 1);\n                goto LABEL_244;\n              }\n              if ( !*(_BYTE *)(v37 + 256) )\n                break;\n              m = *(_DWORD *)(v37 + 392);\n            }\n            v38 = *(unsigned __int16 *)(v37 + 384);\n            if ( (__int16)v38 >= -1 )\n            {\n              if ( v38 != 0xFFFF )\n              {\n                m = *(_DWORD *)(v37 + 392);\n                goto LABEL_198;\n              }\n              v41 = (const char *)getErrorString(v7);\n              snprintf((char *)(v37 + 256), 0x80u, \"%s\", v41);\n              if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n              {\n                if ( (unwebcgiLogType & 1) != 0 )\n                {\n                  v42 = (const char *)getErrorString(v7);\n                  syslog(3, \"webcgi{%s, %d}:Set Failed at Param Level Err: %s\\n\", \"cgiSet\", 657, v42);\n                }\n                if ( (unwebcgiLogType & 2) == 0 )\n                {\n                  m = *(_DWORD *)(v37 + 392);\n                  goto LABEL_198;\n                }\n                v57 = (const char *)getErrorString(v7);\n                sub_3858(\n                  \"\\x1B[38;5;214m\",\n                  \"ERROR\",\n                  \"webcgi{%s, %d}:Set Failed at Param Level Err: %s\\n\",\n                  \"cgiSet\",\n                  657,\n                  v57);\n              }\n            }\n            else\n            {\n              v39 = (const char *)getErrorString((__int16)v38);\n              snprintf((char *)(v37 + 256), 0x80u, \"%s\", v39);\n              if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n              {\n                if ( (unwebcgiLogType & 1) != 0 )\n                {\n                  v40 = (const char *)getErrorString(*(__int16 *)(v37 + 384));\n                  syslog(3, \"webcgi{%s, %d}:Set Failed at Param Level Err: %s\\n\", \"cgiSet\", 654, v40);\n                }\n                if ( (unwebcgiLogType & 2) == 0 )\n                {\n                  m = *(_DWORD *)(v37 + 392);\n                  goto LABEL_198;\n                }\n                v56 = (const char *)getErrorString(*(__int16 *)(v37 + 384));\n                sub_3858(\n                  \"\\x1B[38;5;214m\",\n                  \"ERROR\",\n                  \"webcgi{%s, %d}:Set Failed at Param Level Err: %s\\n\",\n                  \"cgiSet\",\n                  654,\n                  v56);\n              }\n            }\n          }\n        }\n      }\n      else\n      {\n        v35 = v77;\n      }\n      if ( v34 != v35 )\n      {\n        v43 = (unsigned __int16)unwebcgiLogLevel;\n        goto LABEL_233;\n      }\n      if ( v7 < 0 )\n      {\n        if ( !v15 )\n        {\n          puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n          puts(\"Status: 203 Non-Authoritative Information\\n\");\n        }\n        if ( help_isEmptyObj(k) == -1 && *(__int16 *)(k + 258) < -1 )\n          v7 = *(__int16 *)(k + 258);\n        v44 = src;\n        if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n          {\n            v45 = (const char *)getErrorString(v7);\n            syslog(3, \"webcgi{%s, %d}:Generic Set Failure: %s\\n\", \"cgiSet\", 672, v45);\n          }\n          v44 = src;\n          if ( (unwebcgiLogType & 2) != 0 )\n          {\n            v46 = (const char *)getErrorString(v7);\n            sub_3858(\"\\x1B[38;5;214m\", \"ERROR\", \"webcgi{%s, %d}:Generic Set Failure: %s\\n\", \"cgiSet\", 672, v46);\n            goto LABEL_240;\n          }\n        }\n      }\n      else\n      {\n        v43 = (unsigned __int16)unwebcgiLogLevel;\nLABEL_233:\n        if ( v43 >= 3 )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n          {\n            v47 = (const char *)getErrorString(v7);\n            syslog(3, \"webcgi{%s, %d}:Set Failure: %s\\n\", \"cgiSet\", 679, v47);\n          }\n          if ( (unwebcgiLogType & 2) != 0 )\n          {\n            v48 = (const char *)getErrorString(v7);\n            sub_3858(\"\\x1B[38;5;214m\", \"ERROR\", \"webcgi{%s, %d}:Set Failure: %s\\n\", \"cgiSet\", 679, v48);\n          }\n        }\n        v44 = src;\n        if ( !v15 )\n        {\n          puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n          puts(\"Status: 203 Non-Authoritative Information\\n\");\nLABEL_240:\n          v44 = src;\n        }\n      }\n      v49 = k;\n      if ( !v44 )\n        v49 = v65;\n      sub_4E88(v49, v7, k);\n      goto LABEL_244;\n    }\n    if ( !v15 )\n    {\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n      puts(\"Status: 207 Multi-Status\\n\");\n    }\n    if ( v7 != *(unsigned __int16 *)(k + 258) )\n    {\n      v29 = *(_DWORD *)(k + 668);\n      goto LABEL_245;\n    }\n    v30 = sub_4E4C(v65, k, 128);\n    for ( n = *(_DWORD *)(v30 + 660) - 392; ; n = *(_DWORD *)(n + 392) - 392 )\n    {\n      if ( n + 392 == v30 + 660 )\n      {\n        v29 = *(_DWORD *)(k + 668);\n        goto LABEL_245;\n      }\n      if ( v7 == *(__int16 *)(n + 384) )\n        break;\n    }\n    if ( *(_BYTE *)(n + 256) )\n    {\n      help_addParamList(v30, n, v7, n + 256, 0);\n    }\n    else\n    {\n      v32 = getErrorString(v7);\n      help_addParamList(v30, n, v7, v32, 0);\n    }\nLABEL_244:\n    v29 = *(_DWORD *)(k + 668);\nLABEL_245:\n    v15 = 1;\n  }\n  v22 = v68;\n  if ( !src )\nLABEL_266:\n    v22 = v64;\nLABEL_267:\n  help_getJsonFormat(v22, s);\n  puts(s[0]);\n  help_free(s[0], \"CGI/cgi.c\", 722);\n  sub_3840(v68);\n  sub_3840(v66);\nLABEL_268:\n  sub_3840(v64);\nLABEL_301:\n  clock_gettime(0, &v72);\n  if ( LOGPROFILE == 1 )\n  {\n    v54 = LOGPROFILE;\n    if ( (unwebcgiLogType & 1) != 0 )\n    {\n      LODWORD(v58) = LOGPROFILE;\n      HIDWORD(v58) = 1;\n      LODWORD(v59) = nCalDiff[1];\n      HIDWORD(v59) = nCalDiff[0];\n      syslog(\n        6,\n        \"webcgi{%s, %d}:Profile Logs: CGI operation [%s] Obj [%s] CGI [%f] secs Cal [%f] secs completed.\\n\",\n        \"main\",\n        1680,\n        v5,\n        &byte_1D0EC,\n        v58,\n        v59);\n    }\n    if ( (unwebcgiLogType & 2) != 0 )\n    {\n      LODWORD(v60) = nCalDiff[1];\n      HIDWORD(v60) = nCalDiff[0];\n      sub_3858(\n        \"\\x1B[31m\",\n        \"INFO\",\n        \"webcgi{%s, %d}:Profile Logs: CGI operation [%s] Obj [%s] CGI [%f] secs Cal [%f] secs completed.\\n\",\n        \"main\",\n        1680,\n        v5,\n        &byte_1D0EC,\n        COERCE_DOUBLE(v54 | 0x100000000LL),\n        v60);\n    }\n  }\n  return 0;\n}\n```","x":-310,"y":-19980,"width":1470,"height":22700},
		{"id":"2672722f13ac18b5","type":"text","text":"![](https://i.imgur.com/nBgmUeH.png)","x":1187,"y":-21000,"width":2033,"height":808},
		{"id":"c6390a54dd747864","type":"text","text":"# 뭘 실행하든 cgi로 링킹되자만 어느 파일로 실행했느냐에 따라 cgi에서 실행되는 내용이 바뀐다.","x":1484,"y":-20192,"width":1440,"height":72},
		{"id":"126901e16550723b","type":"text","text":"## block1\n\n```c\nint __cdecl ftext(int argc, const char **argv, const char **envp)\n{\n// 변수 생략\n  unwebcgiLogLevel = 7;\n  v73.tv_sec = 0; v73.tv_nsec = 0;\n  v72.tv_sec = 0; v72.tv_nsec = 0;\n  clock_gettime(0, &v73); // 현재 시간 측정\n  v4 = *argv; // 명령줄 첫 인자\n  v5 = strrchr(*argv, 47); // 명령줄 첫 인자에서 마지막 '/' 검색\n  if (!v5) // '/'가 없으면 오류 메시지 로그\n  {\n    if (unwebcgiLogLevel >= 3u)\n    {\n      if (unwebcgiLogType & 1) syslog(3, \"webcgi{%s, %d}:Invalid Post Format: %s\\n\", \"main\", 1615, v4);\n      if (unwebcgiLogType & 2) sub_3858(\"\\x1B[38;5;214m\", \"ERROR\", \"webcgi{%s, %d}:Invalid Post Format: %s\\n\", \"main\", 1615, *argv);\n    }\n    return 0; // 함수 종료\n  }\n  v6 = getenv(\"REQUEST_METHOD\"); // 요청 메서드 확인\n  if (v6 && !strcmp(v6, \"GET\") && !strcmp(v5, \"/cgi_set\")) // GET 메서드 및 특정 경로인 경우\n  {\n    printf(\"%s%c%c\\n\", \"Content-Type:text/html;charset=iso-8859-1\", 13, 10);\n    puts(\"<strong style=\\\"color: red;\\\">Nice Try!! Not allowed. Please use web pages</strong>\");\n    return 0; // 함수 종료\n  }\n\n```","x":1604,"y":-19980,"width":1320,"height":760},
		{"id":"e69a13e4d6fe01e1","type":"text","text":"초기 변수 선언과 설정을 한다. 입력된 CGI 경로의 유효성을 검사하고 요청 메서드가 GET이고 /cgi_set 인 경우, 사용자에게 HTML 응답을 통해 접근 금지 메시지를 보낸다.","x":3064,"y":-19660,"width":560,"height":120},
		{"id":"526a75598c45ac14","type":"text","text":"# block 2\n\n```c\n  LOGPROFILE = !stat(\"/opt/lantiq/etc/profile.log\", &v62) && (v62.st_mode & S_IFMT) == S_IFREG;\n  if (strcmp(v5, \"/cgi_set\")) // '/cgi_set'이 아니면 다른 CGI 경로 처리\n  {\n    if (!strcmp(v5, \"/cgi_action\")) // '/cgi_action' 경로인 경우\n    {\n      sub_502C(); // 특정 함수 호출\n      goto LABEL_301; // 함수 종료 라벨로 이동\n    }\n    if (!strcmp(v5, \"/cgi_get\")) // '/cgi_get' 경로인 경우\n      goto LABEL_278; // LABEL_278로 이동하여 처리\n    if (!strcmp(v5, \"/cgi_get_nosubobj\") || !strcmp(v5, \"/cgi_get_fillparams\") || !strcmp(v5, \"/cgi_get_subobjvals\"))\n      goto LABEL_273; // LABEL_273로 이동하여 처리\n    if (!strcmp(v5, \"/cgi_get_filterbyparamval\")) // 특정 파라미터 값으로 필터링하는 경우\n    {\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\"); // 컨텐츠 타입 설정\nLABEL_278:\n      v52 = 4100; // 상태 코드 설정\n      goto LABEL_286; // LABEL_286로 이동하여 처리\n    }\n    if (strcmp(v5, \"/cgi_get_filterbyparamvalnosubobj\") && strcmp(v5, \"/cgi_get_subobjvalsfilterbyparamval\"))\n    {\n      if (strcmp(v5, \"/cgi_get_filterbyfirstparamval\")) // 첫 번째 파라미터 값으로 필터링\n      {\n        if (strcmp(v5, \"/cgi_get_defval\")) // 기본 값 조회\n        {\n          if (strcmp(v5, \"/cgi_get_mountpaths\")) // 마운트 경로 조회\n          {\n            if (unwebcgiLogLevel >= 3u) // 로그 레벨이 3 이상인 경우\n            {\n              if (unwebcgiLogType & 1)\n                syslog(3, \"webcgi{%s, %d}:Invalid arg: %s\\n\", \"main\", 1676, *argv);\n              if (unwebcgiLogType & 2)\n                sub_3858(\"\\x1B[38;5;214m\", \"ERROR\", \"webcgi{%s, %d}:Invalid arg: %s\\n\", \"main\", 1676, *argv);\n            }\n          }\n          else // '/cgi_get_mountpaths' 경로인 경우\n          {\n            dword_1D1EC = 1;\n            strcpy(v63, \"/mnt/usb/*/*/\");\n            if (glob(v63, 0x2000, 0, (glob_t *)v61)) // 경로에 대한 glob 처리\n            {\n              puts(\"{\\n\\t\\\"Objects\\\": [\"); // JSON 시작\n              puts(\"\\t]\\n}\"); // JSON 종료\n            }\n            else\n            {\n              v53 = 0;\n              puts(\"{\\n\\t\\\"Objects\\\": [\"); // JSON 객체 배열 시작\n              while (v53 < *(_DWORD *)v61) // glob 결과에 대한 반복\n              {\n                printf(\"\\t\\t{\\n\\t\\t\\t\\\"ObjName\\\": \\\"dirlist.mnt.usb.%d.\\\",\\n\\t\\t\\t\\\"Param\\\":[\\n\", v53);\n                printf(\n                  \"\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\\"ParamName\\\": \\\"path\\\",\\n\\t\\t\\t\\t\\\"ParamValue\\\": \\\"%s\\\"\\n\\t\\t\\t\\t}\\n\",\n                  *(const char **)(*(_DWORD *)&v61[4] + 4 * v53++));\n                printf(\"\\t\\t\\t]\\n\\t\\t}\");\n                if (v53 == *(_DWORD *)v61)\n                  putchar(10); // 마지막 객체 후 줄바꿈\n                else\n                  puts(\",\"); // 객체 구분을 위한 콤마\n              }\n              puts(\"\\t]\\n}\"); // JSON 객체 배열 종료\n              globfree((glob_t *)v61); // glob 구조체 해제\n            }\n            goto LABEL_301; // 함수 종료 라벨로 이동\n          }\n          goto LABEL_301; // 함수 종료 라벨로 이동\n        }\n        puts(\"Content-Type: text/plain;charset=utf-8\\r\"); // 컨텐츠 타입 설정\n        v52 = 4416; // 상태 코드 설정\nLABEL_286:\n        sub_7998(v52); // 상태 코드에 따른 처리 함수 호출\n        goto LABEL_301; // 함수 종료 라벨로 이동\n      }\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\"); // 컨텐츠 타입 설정\n      dword_1D1EC = 1;\n    }\n    else\n    {\nLABEL_273:\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\"); // 컨텐츠 타입 설정\n    }\n    v52 = 4352; // 상태 코드 설정\n    goto LABEL_286; // LABEL_286로 이동하여 처리\n  }\n\n```","x":1604,"y":-19220,"width":1320,"height":2190},
		{"id":"88ab5c6d03e4c13a","type":"text","text":"다양한 CGI 경로에 대한 처리를 담당한다. 경로에 따라 적절한 HTTP 헤더를 설정하고 조건에 맞는 처리 함수를 호출한다.","x":3064,"y":-18187,"width":560,"height":127},
		{"id":"a1b7c5aa29e3fe52","x":3020,"y":-16879,"width":310,"height":68,"type":"text","text":"변수 및 배열들을 초기화 한다."},
		{"id":"60491c010c72f8a8","type":"text","text":"# block 3\n\n\n```c\n  memset(v68, 0, sizeof(v68));  // v68 배열 초기화\n  v69 = 0;                      // v69 변수 초기화\n  v70 = 0;                      // v70 변수 초기화\n  v71 = 0;                      // v71 변수 초기화\n  memset(v66, 0, sizeof(v66));  // v66 배열 초기화\n  v67 = 0;                      // v67 변수 초기화\n  memset(v64, 0, sizeof(v64));  // v64 배열 초기화\n  v65 = 0;                      // v65 변수 초기화\n  s[0] = 0;                     // 문자열 배열 s 초기화\n  memset(v61, 0, sizeof(v61));  // v61 바이트 배열 초기화\n  memset(v63, 0, sizeof(v63));  // v63 문자 배열 초기화\n  v76 = v68;                    // 포인터 v76에 v68 배열의 주소 할당\n```","x":1600,"y":-17030,"width":1320,"height":430},
		{"id":"cb26c113eabbd56c","x":1604,"y":-16600,"width":1320,"height":275,"type":"text","text":"# block 4\n\n```c\nsub_4B8C(v68, 2, 4);          // 설정 구조를 초기화하는 함수 호출\nv69 = 3;                      // 설정 관련 상태 또는 플래그 설정\nv7 = sub_6AB4(v68, \"set\");    // \"set\" 연산을 수행하도록 시도하고 결과를 v7에 저장\nif (v7)                       // v7 값 검사, 오류가 있으면 LABEL_119로 점프하여 처리 중단\n    goto LABEL_119;\n\n```"},
		{"id":"03a8de2f896408f2","x":1604,"y":-16160,"width":1320,"height":2955,"type":"text","text":"```c\n  v8 = *(_DWORD *)(v71 + 668);\n  v77 = v71;\n  for ( i = v8 - 668; i != v77; i = *(_DWORD *)(i + 668) - 668 )\n  {\n    if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n    {\n      if ( (unwebcgiLogType & 1) != 0 )\n        syslog(6, \"webcgi{%s, %d}:Performing set action of object :%s\\n\", \"cgiSet\", 440, (const char *)i);\n      if ( (unwebcgiLogType & 2) != 0 )\n        sub_3858(\n          \"\\x1B[0m\",\n          \"INFO\",\n          \"webcgi{%s, %d}:Performing set action of object :%s\\n\",\n          \"cgiSet\",\n          440,\n          (const char *)i);\n    }\n    if ( strstr((const char *)i, \"openwrt.\") )\n    {\n      if ( (*(_DWORD *)(i + 260) & 2) != 0 )\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(6, \"webcgi{%s, %d}:Performing delete actoin of object :%s\\n\", \"cgiSet\", 443, (const char *)i);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\n              \"\\x1B[0m\",\n              \"INFO\",\n              \"webcgi{%s, %d}:Performing delete actoin of object :%s\\n\",\n              \"cgiSet\",\n              443,\n              (const char *)i);\n        }\n        v7 = openwrt_deleteConfig(i);\n        v10 = *(_DWORD *)(i + 260);\n      }\n      else\n      {\n        v10 = *(_DWORD *)(i + 260);\n      }\n      if ( (v10 & 5) != 0 )\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(6, \"webcgi{%s, %d}:Performing ADD/Modify action of object :%s\\n\", \"cgiSet\", 447, (const char *)i);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\n              \"\\x1B[0m\",\n              \"INFO\",\n              \"webcgi{%s, %d}:Performing ADD/Modify action of object :%s\\n\",\n              \"cgiSet\",\n              447,\n              (const char *)i);\n        }\n        memset(modifyObj, 0, (size_t)&unk_32204);\n        for ( j = *(_DWORD *)(i + 660); ; j = *(_DWORD *)(v12 + 392) )\n        {\n          v12 = j - 392;\n          if ( v12 + 392 == i + 660 )\n            break;\n          fbss = dword_13E3FC0;\n          src = (char *)(v12 + 256);\n          if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n          {\n            if ( (unwebcgiLogType & 1) != 0 )\n              syslog(6, \"webcgi{%s, %d}: %s : %s \\n\", \"cgiSet\", 452, (const char *)v12, (const char *)(v12 + 256));\n            if ( (unwebcgiLogType & 2) != 0 )\n              sub_3858(\"\\x1B[0m\", \"INFO\", \"webcgi{%s, %d}: %s : %s \\n\", \"cgiSet\", 452, (const char *)v12, src);\n          }\n          v78 = fbss;\n          strcpy(&modifyObj[1024 * fbss + 512], (const char *)v12);\n          strcpy(&modifyObj[1024 * v78 + 1024], src);\n          dword_13E3FC0 += (int)&stdout + 1;\n        }\n        if ( (*(_DWORD *)(i + 260) & 4) != 0 )\n        {\n          v13 = i;\n          if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n          {\n            if ( (unwebcgiLogType & 1) != 0 )\n              syslog(6, \"webcgi{%s, %d}:Performing Modify action for object :%s\\n\", \"cgiSet\", 459, (const char *)i);\n            if ( (unwebcgiLogType & 2) != 0 )\n              sub_3858(\n                \"\\x1B[0m\",\n                \"INFO\",\n                \"webcgi{%s, %d}:Performing Modify action for object :%s\\n\",\n                \"cgiSet\",\n                459,\n                (const char *)i);\n            v13 = i;\n          }\n          v14 = ((int (__fastcall *)(int, char *))openwrt_modifyConfig)(v13, modifyObj);\n          goto LABEL_61;\n        }\n        if ( (*(_DWORD *)(i + 260) & 1) != 0 )\n        {\n          if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n          {\n            if ( (unwebcgiLogType & 1) != 0 )\n              syslog(6, \"webcgi{%s, %d}:Performing Add for object :%s\\n\", \"cgiSet\", 462, (const char *)i);\n            if ( (unwebcgiLogType & 2) != 0 )\n              sub_3858(\n                \"\\x1B[0m\",\n                \"INFO\",\n                \"webcgi{%s, %d}:Performing Add for object :%s\\n\",\n                \"cgiSet\",\n                462,\n                (const char *)i);\n          }\n          v14 = ((int (__fastcall *)(int, char *))openwrt_addConfig)(i, modifyObj);\nLABEL_61:\n          v7 = v14;\n        }\n      }\n      openwrt = 1;\n      continue;\n    }\n  }\n\n```"},
		{"id":"c7b879469a28e44a","x":1604,"y":-13087,"width":1320,"height":2187,"type":"text","text":"# aa\n\n```c\n  if ( openwrt )\n  {\n    sub_4B8C(v64, 2, 4);\n    sub_4E88(v65, v7, &byte_1D0EC);\n    help_getJsonFormat(v64, s);\n    printf(\"%s\", s[0]);\n    help_free(s[0], \"CGI/cgi.c\", 474);\n    goto LABEL_268;\n  }\n  if ( (unsigned int)(dword_1D1F4 - 1) < 2 )\n  {\n    v68[0] |= 0x100u;\n    if ( dword_1D1F4 == 1 )\n    {\n      sub_4C14(v63);\n      if ( !strcmp(v63, \"UPG_REQ\") )\n      {\n        dword_1D1F4 = 0;\n        goto LABEL_95;\n      }\n      sub_4B8C(v66, 258, 4);\n      help_copyCompleteObjList(v67, 4, v71);\n      v7 = cal_setValue(v66);\n    }\n    if ( v7 )\n    {\n      if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n      {\n        if ( (unwebcgiLogType & 1) != 0 )\n          syslog(3, \"webcgi{%s, %d}:Firmware Upgrade Request Failed !! cal_set nRet = %d\\n\", \"cgiSet\", 504, v7);\n        if ( (unwebcgiLogType & 2) != 0 )\n        {\n          sub_3858(\n            \"\\x1B[38;5;214m\",\n            \"ERROR\",\n            \"webcgi{%s, %d}:Firmware Upgrade Request Failed !! cal_set nRet = %d\\n\",\n            \"cgiSet\",\n            504,\n            v7);\n          goto LABEL_117;\n        }\n        dword_1D1F4 = 0;\n      }\n      else\n      {\n        dword_1D1F4 = 0;\n      }\n    }\n    else\n    {\n      v7 = sub_3E98(0);\n      if ( !v7 )\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(6, \"webcgi{%s, %d}:Firmware file download completed !!\\n\", \"cgiSet\", 497);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\"\\x1B[0m\", \"INFO\", \"webcgi{%s, %d}:Firmware file download completed !!\\n\", \"cgiSet\", 497);\n        }\n        goto LABEL_92;\n      }\n      if ( (unsigned __int16)unwebcgiLogLevel < 3u )\n      {\n        dword_1D1F4 = 0;\n        goto LABEL_119;\n      }\n      if ( (unwebcgiLogType & 1) != 0 )\n        syslog(3, \"webcgi{%s, %d}:Firmware file download failed !! nRet = %d\\n\", \"cgiSet\", 499, v7);\n      if ( (unwebcgiLogType & 2) == 0 )\n      {\n        dword_1D1F4 = 0;\n        goto LABEL_119;\n      }\n      sub_3858(\n        \"\\x1B[38;5;214m\",\n        \"ERROR\",\n        \"webcgi{%s, %d}:Firmware file download failed !! nRet = %d\\n\",\n        \"cgiSet\",\n        499,\n        v7);\nLABEL_117:\n      dword_1D1F4 = 0;\n    }\n    goto LABEL_119;\n  }\n\n```"},
		{"id":"4970d47a28e16b49","x":1604,"y":-10661,"width":1320,"height":1401,"type":"text","text":"## b\n\n```c\nLABEL_92:\n  if ( dword_1D1F0 != 1 )\n  {\nLABEL_118:\n    v7 = cal_setValue(v68);\n    goto LABEL_119;\n  }\n  sub_4C14(v63);\n  if ( !strcmp(v63, \"UPG_REQ\") )\n  {\n    dword_1D1F0 = 0;\nLABEL_95:\n    v7 = -1;\n    goto LABEL_119;\n  }\n  sub_4B8C(v66, 2, 4);\n  help_copyCompleteObjList(v67, 4, v71);\n  v7 = cal_setValue(v66);\n  if ( !v7 )\n  {\n    v7 = sub_3E98(1);\n    if ( v7 )\n    {\n      if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n      {\n        if ( (unwebcgiLogType & 1) != 0 )\n          syslog(3, \"webcgi{%s, %d}:Config file download failed !! nRet = %d\\n\", \"cgiSet\", 526, v7);\n        if ( (unwebcgiLogType & 2) != 0 )\n          sub_3858(\n            \"\\x1B[38;5;214m\",\n            \"ERROR\",\n            \"webcgi{%s, %d}:Config file download failed !! nRet = %d\\n\",\n            \"cgiSet\",\n            526,\n            v7);\n        dword_1D1F0 = 0;\n      }\n      else\n      {\n        dword_1D1F0 = 0;\n      }\n      goto LABEL_119;\n    }\n    if ( (unsigned __int16)unwebcgiLogLevel >= 6u )\n    {\n      if ( (unwebcgiLogType & 1) != 0 )\n        syslog(6, \"webcgi{%s, %d}:Config file download completed !!\\n\", \"cgiSet\", 524);\n      if ( (unwebcgiLogType & 2) != 0 )\n        sub_3858(\"\\x1B[0m\", \"INFO\", \"webcgi{%s, %d}:Config file download completed !!\\n\", \"cgiSet\", 524);\n    }\n    goto LABEL_118;\n  }\n```"},
		{"id":"684e68ed5ea0028a","x":1604,"y":-9000,"width":1320,"height":640,"type":"text","text":"## aaaa\n\n```c\n  if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n  {\n    if ( (unwebcgiLogType & 1) != 0 )\n      syslog(3, \"webcgi{%s, %d}:Config update Request Failed !! cal_set nRet = %d\\n\", \"cgiSet\", 531, v7);\n    if ( (unwebcgiLogType & 2) != 0 )\n    {\n      sub_3858(\n        \"\\x1B[38;5;214m\",\n        \"ERROR\",\n        \"webcgi{%s, %d}:Config update Request Failed !! cal_set nRet = %d\\n\",\n        \"cgiSet\",\n        531,\n        v7);\n      goto LABEL_117;\n    }\n    dword_1D1F4 = 0;\n  }\n  else\n  {\n    dword_1D1F4 = 0;\n  }\n```"},
		{"id":"90dab5e69d66dc27","x":1604,"y":-8096,"width":1320,"height":1556,"type":"text","text":"# asdf\n\n```c\nLABEL_119:\n  sub_4B8C(v64, 2, 4);\n  if ( dword_1D1F4 == 1 )\n  {\n    v15 = 0;\n    if ( !v7 )\n    {\n      if ( sub_4C14(v63) )\n        goto LABEL_120;\n      if ( !strcmp(v63, \"UPG_SUCC\") )\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 2u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(2, \"webcgi{%s, %d}:Firmware Upgrade Success -> System Going for Reboot !!\\n\", \"cgiSet\", 548);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\n              \"\\x1B[31m\",\n              \"CRITICAL\",\n              \"webcgi{%s, %d}:Firmware Upgrade Success -> System Going for Reboot !!\\n\",\n              \"cgiSet\",\n              548);\n        }\n        puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n        puts(\"Status: 200 OK\\n\");\n        sub_4E88(v65, 0, &byte_1D0EC);\n        help_getJsonFormat(v64, s);\n        puts(s[0]);\n        help_free(s[0], \"CGI/cgi.c\", 556);\n        sub_3840(v68);\n        sub_3840(v66);\n        sub_3840(v64);\n        system(\"reboot\");\n        goto LABEL_301;\n      }\n      if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n      {\n        if ( (unwebcgiLogType & 1) != 0 )\n          syslog(\n            3,\n            \"webcgi{%s, %d}:Firmware Upgrade Failed in the backend !! Current Status: %s nRet = %d\\n\",\n            \"cgiSet\",\n            563,\n            v63,\n            0);\n        if ( (unwebcgiLogType & 2) != 0 )\n          sub_3858(\n            \"\\x1B[38;5;214m\",\n            \"ERROR\",\n            \"webcgi{%s, %d}:Firmware Upgrade Failed in the backend !! Current Status: %s nRet = %d\\n\",\n            \"cgiSet\",\n            563,\n            v63,\n            0);\n      }\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n      v15 = 1;\n      puts(\"Status: 203 Non-Authoritative Information\\n\");\n    }\n  }\n```"},
		{"id":"fede7b669270f5b2","x":1604,"y":-6340,"width":1320,"height":2260,"type":"text","text":"# afff\n\n```c\n  else\n  {\nLABEL_120:\n    v15 = 0;\n  }\n  if ( dword_1D1F0 == 1 )\n  {\n    if ( !v7 )\n    {\n      if ( sub_4C14(v63) )\n      {\n        v7 = 0;\n        goto LABEL_153;\n      }\n      if ( strcmp(v63, \"UPG_SUCC\") )\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(\n              3,\n              \"webcgi{%s, %d}:Configuration restore Failed in the backend !! Current Status: %s nRet = %d\\n\",\n              \"cgiSet\",\n              578,\n              v63,\n              0);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\n              \"\\x1B[38;5;214m\",\n              \"ERROR\",\n              \"webcgi{%s, %d}:Configuration restore Failed in the backend !! Current Status: %s nRet = %d\\n\",\n              \"cgiSet\",\n              578,\n              v63,\n              0);\n        }\n        puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n        v7 = 1;\n        puts(\"Status: 203 Non-Authoritative Information\\n\");\nLABEL_155:\n        v16 = dword_1D1F4;\n      }\n      else\n      {\n        if ( (unsigned __int16)unwebcgiLogLevel >= 2u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n            syslog(2, \"webcgi{%s, %d}:Configuration restore Success -> System Going for Reboot !!\\n\", \"cgiSet\", 575);\n          if ( (unwebcgiLogType & 2) != 0 )\n            sub_3858(\n              \"\\x1B[31m\",\n              \"CRITICAL\",\n              \"webcgi{%s, %d}:Configuration restore Success -> System Going for Reboot !!\\n\",\n              \"cgiSet\",\n              575);\n        }\n        v7 = 0;\n        scapi_reboot();\nLABEL_153:\n        v16 = dword_1D1F4;\n        if ( !v15 )\n        {\n          puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n          puts(\"Status: 200 OK\\n\");\n          goto LABEL_155;\n        }\n      }\n      v17 = v65;\n      if ( v16 == 1 || (v18 = v65, dword_1D1F0 == 1) )\n      {\n        if ( strcmp(v63, \"UPG_SUCC\") )\n        {\n          v19 = sub_4E4C(v17, &byte_1D0EC, 128);\n          if ( v7 )\n            help_addParamList(v19, \"\", 0, \" DB Restore Failed\", 0);\n          else\n            help_addParamList(v19, \"\", 0, \" Firmware Upgrade Failed\", 0);\n          goto LABEL_165;\n        }\n        v18 = v17;\n      }\n      v20 = 0;\n      v21 = &byte_1D0EC;\nLABEL_164:\n      sub_4E88(v18, v20, v21);\nLABEL_165:\n      v22 = v64;\n      goto LABEL_267;\n    }\n  }\n```"},
		{"id":"3006fc06d9dc1458","x":1604,"y":-3960,"width":1320,"height":1560,"type":"text","text":"# fff\n\n```c\n  else if ( !v7 )\n  {\n    goto LABEL_153;\n  }\n  isEmptyObj = help_isEmptyObj(v71);\n  v24 = v71;\n  if ( isEmptyObj != -1 )\n  {\n    if ( help_isEmptyObj(v71) || v7 >= 0 )\n    {\n      if ( help_isEmptyObj(v71) )\n        goto LABEL_266;\n      if ( v7 <= 0 )\n      {\n        v22 = v64;\n        goto LABEL_267;\n      }\n      if ( v15 )\n      {\n        v18 = v65;\n        goto LABEL_264;\n      }\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n      puts(\"Status: 207 Multi-Status\\n\");\n    }\n    else\n    {\n      if ( !v15 )\n      {\n        puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n        puts(\"Status: 203 Non-Authoritative Information\\n\");\n      }\n      if ( (unsigned __int16)unwebcgiLogLevel < 3u )\n      {\n        v18 = v65;\nLABEL_264:\n        v20 = v7;\n        v21 = (char *)v71;\n        goto LABEL_164;\n      }\n      if ( (unwebcgiLogType & 1) != 0 )\n      {\n        ErrorString = (const char *)getErrorString(v7);\n        syslog(3, \"webcgi{%s, %d}:Generic Set Failure: %s\\n\", \"cgiSet\", 702, ErrorString);\n      }\n      if ( (unwebcgiLogType & 2) == 0 )\n      {\n        v18 = v65;\n        goto LABEL_264;\n      }\n      v51 = (const char *)getErrorString(v7);\n      sub_3858(\"\\x1B[38;5;214m\", \"ERROR\", \"webcgi{%s, %d}:Generic Set Failure: %s\\n\", \"cgiSet\", 702, v51);\n    }\n    v18 = v65;\n    goto LABEL_264;\n  }\n  v25 = *(_DWORD *)(v71 + 668);\n  src = 0;\n```"},
		{"id":"bd0051c29dbf4586","x":1604,"y":-2280,"width":1320,"height":640,"type":"text","text":"# fdfd\n\n```c\n  for ( k = v25 - 668; k != v24; k = v29 - 668 )\n  {\n    if ( *(_BYTE *)k && unSub == 1 )\n    {\n      snprintf(v61, 0x100u, \"%s\", (const char *)k);\n      if ( v61[strlen(v61) - 1] == 46 )\n      {\n        v27 = strrchr(v61, 46);\n        if ( v27 )\n          *v27 = 0;\n      }\n      v28 = strrchr(v61, 46);\n      if ( v28 )\n      {\n        if ( (unsigned __int8)(v28[1] - 48) < 0xAu )\n          v28[1] = 0;\n        snprintf((char *)k, 0x100u, \"%s\", v61);\n      }\n    }\n```"},
		{"id":"d75265eb185d014a","x":1604,"y":-1540,"width":1320,"height":1620,"type":"text","text":"# ffff\n\n```c\n    if ( help_isEmptyObj(k) != -1 || v7 <= 0 )\n    {\n      v33 = help_isEmptyObj(k);\n      v77 = k + 660;\n      v34 = *(_DWORD *)(k + 660);\n      if ( v33 == -1 )\n      {\n        v35 = v77;\n        if ( v34 != v77 && v7 < 0 )\n        {\n          if ( !v15 )\n          {\n            puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n            puts(\"Status: 206 Partial Content\\n\");\n          }\n          for ( m = *(_DWORD *)(k + 660); ; m = *(_DWORD *)(v37 + 392) )\n          {\n            while ( 1 )\n            {\nLABEL_198:\n              v37 = m - 392;\n              if ( v77 == v37 + 392 )\n              {\n                src = (_BYTE *)(&stdout + 1);\n                goto LABEL_244;\n              }\n              if ( !*(_BYTE *)(v37 + 256) )\n                break;\n              m = *(_DWORD *)(v37 + 392);\n            }\n            v38 = *(unsigned __int16 *)(v37 + 384);\n            if ( (__int16)v38 >= -1 )\n            {\n              if ( v38 != 0xFFFF )\n              {\n                m = *(_DWORD *)(v37 + 392);\n                goto LABEL_198;\n              }\n              v41 = (const char *)getErrorString(v7);\n              snprintf((char *)(v37 + 256), 0x80u, \"%s\", v41);\n              if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n              {\n                if ( (unwebcgiLogType & 1) != 0 )\n                {\n                  v42 = (const char *)getErrorString(v7);\n                  syslog(3, \"webcgi{%s, %d}:Set Failed at Param Level Err: %s\\n\", \"cgiSet\", 657, v42);\n                }\n                if ( (unwebcgiLogType & 2) == 0 )\n                {\n                  m = *(_DWORD *)(v37 + 392);\n                  goto LABEL_198;\n                }\n                v57 = (const char *)getErrorString(v7);\n                sub_3858(\n                  \"\\x1B[38;5;214m\",\n                  \"ERROR\",\n                  \"webcgi{%s, %d}:Set Failed at Param Level Err: %s\\n\",\n                  \"cgiSet\",\n                  657,\n                  v57);\n              }\n            }\n```"},
		{"id":"a76f3ca3aced131d","x":1604,"y":298,"width":1320,"height":842,"type":"text","text":"# jfkf\n\n```c\n            else\n            {\n              v39 = (const char *)getErrorString((__int16)v38);\n              snprintf((char *)(v37 + 256), 0x80u, \"%s\", v39);\n              if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n              {\n                if ( (unwebcgiLogType & 1) != 0 )\n                {\n                  v40 = (const char *)getErrorString(*(__int16 *)(v37 + 384));\n                  syslog(3, \"webcgi{%s, %d}:Set Failed at Param Level Err: %s\\n\", \"cgiSet\", 654, v40);\n                }\n                if ( (unwebcgiLogType & 2) == 0 )\n                {\n                  m = *(_DWORD *)(v37 + 392);\n                  goto LABEL_198;\n                }\n                v56 = (const char *)getErrorString(*(__int16 *)(v37 + 384));\n                sub_3858(\n                  \"\\x1B[38;5;214m\",\n                  \"ERROR\",\n                  \"webcgi{%s, %d}:Set Failed at Param Level Err: %s\\n\",\n                  \"cgiSet\",\n                  654,\n                  v56);\n              }\n            }\n          }\n        }\n      }\n```"},
		{"id":"da6826ba9e4b30f8","x":1604,"y":1320,"width":1320,"height":1760,"type":"text","text":"# hghghh\n\n```c\n      else\n      {\n        v35 = v77;\n      }\n      if ( v34 != v35 )\n      {\n        v43 = (unsigned __int16)unwebcgiLogLevel;\n        goto LABEL_233;\n      }\n      if ( v7 < 0 )\n      {\n        if ( !v15 )\n        {\n          puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n          puts(\"Status: 203 Non-Authoritative Information\\n\");\n        }\n        if ( help_isEmptyObj(k) == -1 && *(__int16 *)(k + 258) < -1 )\n          v7 = *(__int16 *)(k + 258);\n        v44 = src;\n        if ( (unsigned __int16)unwebcgiLogLevel >= 3u )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n          {\n            v45 = (const char *)getErrorString(v7);\n            syslog(3, \"webcgi{%s, %d}:Generic Set Failure: %s\\n\", \"cgiSet\", 672, v45);\n          }\n          v44 = src;\n          if ( (unwebcgiLogType & 2) != 0 )\n          {\n            v46 = (const char *)getErrorString(v7);\n            sub_3858(\"\\x1B[38;5;214m\", \"ERROR\", \"webcgi{%s, %d}:Generic Set Failure: %s\\n\", \"cgiSet\", 672, v46);\n            goto LABEL_240;\n          }\n        }\n      }\n      else\n      {\n        v43 = (unsigned __int16)unwebcgiLogLevel;\nLABEL_233:\n        if ( v43 >= 3 )\n        {\n          if ( (unwebcgiLogType & 1) != 0 )\n          {\n            v47 = (const char *)getErrorString(v7);\n            syslog(3, \"webcgi{%s, %d}:Set Failure: %s\\n\", \"cgiSet\", 679, v47);\n          }\n          if ( (unwebcgiLogType & 2) != 0 )\n          {\n            v48 = (const char *)getErrorString(v7);\n            sub_3858(\"\\x1B[38;5;214m\", \"ERROR\", \"webcgi{%s, %d}:Set Failure: %s\\n\", \"cgiSet\", 679, v48);\n          }\n        }\n        v44 = src;\n        if ( !v15 )\n        {\n          puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n          puts(\"Status: 203 Non-Authoritative Information\\n\");\nLABEL_240:\n          v44 = src;\n        }\n      }\n      v49 = k;\n      if ( !v44 )\n        v49 = v65;\n      sub_4E88(v49, v7, k);\n      goto LABEL_244;\n    }\n```"},
		{"id":"8cc225e5ca3645b4","x":1604,"y":3240,"width":1320,"height":2200,"type":"text","text":"# fhgh\n\n```c\n    if ( !v15 )\n    {\n      puts(\"Content-Type: text/plain;charset=utf-8\\r\");\n      puts(\"Status: 207 Multi-Status\\n\");\n    }\n    if ( v7 != *(unsigned __int16 *)(k + 258) )\n    {\n      v29 = *(_DWORD *)(k + 668);\n      goto LABEL_245;\n    }\n    v30 = sub_4E4C(v65, k, 128);\n    for ( n = *(_DWORD *)(v30 + 660) - 392; ; n = *(_DWORD *)(n + 392) - 392 )\n    {\n      if ( n + 392 == v30 + 660 )\n      {\n        v29 = *(_DWORD *)(k + 668);\n        goto LABEL_245;\n      }\n      if ( v7 == *(__int16 *)(n + 384) )\n        break;\n    }\n    if ( *(_BYTE *)(n + 256) )\n    {\n      help_addParamList(v30, n, v7, n + 256, 0);\n    }\n    else\n    {\n      v32 = getErrorString(v7);\n      help_addParamList(v30, n, v7, v32, 0);\n    }\nLABEL_244:\n    v29 = *(_DWORD *)(k + 668);\nLABEL_245:\n    v15 = 1;\n  }\n  v22 = v68;\n  if ( !src )\nLABEL_266:\n    v22 = v64;\nLABEL_267:\n  help_getJsonFormat(v22, s);\n  puts(s[0]);\n  help_free(s[0], \"CGI/cgi.c\", 722);\n  sub_3840(v68);\n  sub_3840(v66);\nLABEL_268:\n  sub_3840(v64);\nLABEL_301:\n  clock_gettime(0, &v72);\n  if ( LOGPROFILE == 1 )\n  {\n    v54 = LOGPROFILE;\n    if ( (unwebcgiLogType & 1) != 0 )\n    {\n      LODWORD(v58) = LOGPROFILE;\n      HIDWORD(v58) = 1;\n      LODWORD(v59) = nCalDiff[1];\n      HIDWORD(v59) = nCalDiff[0];\n      syslog(\n        6,\n        \"webcgi{%s, %d}:Profile Logs: CGI operation [%s] Obj [%s] CGI [%f] secs Cal [%f] secs completed.\\n\",\n        \"main\",\n        1680,\n        v5,\n        &byte_1D0EC,\n        v58,\n        v59);\n    }\n    if ( (unwebcgiLogType & 2) != 0 )\n    {\n      LODWORD(v60) = nCalDiff[1];\n      HIDWORD(v60) = nCalDiff[0];\n      sub_3858(\n        \"\\x1B[31m\",\n        \"INFO\",\n        \"webcgi{%s, %d}:Profile Logs: CGI operation [%s] Obj [%s] CGI [%f] secs Cal [%f] secs completed.\\n\",\n        \"main\",\n        1680,\n        v5,\n        &byte_1D0EC,\n        COERCE_DOUBLE(v54 | 0x100000000LL),\n        v60);\n    }\n  }\n  return 0;\n}\n```"}
	],
	"edges":[
		{"id":"77604bf38f0c3b80","fromNode":"126901e16550723b","fromSide":"right","toNode":"e69a13e4d6fe01e1","toSide":"left"},
		{"id":"ba1ee5a6d373c1fd","fromNode":"126901e16550723b","fromSide":"bottom","toNode":"526a75598c45ac14","toSide":"top"},
		{"id":"0e687e0147f6672b","fromNode":"526a75598c45ac14","fromSide":"right","toNode":"88ab5c6d03e4c13a","toSide":"left"},
		{"id":"923ff551125b03b2","fromNode":"526a75598c45ac14","fromSide":"bottom","toNode":"60491c010c72f8a8","toSide":"top"},
		{"id":"2371a229246a2c6d","fromNode":"60491c010c72f8a8","fromSide":"right","toNode":"a1b7c5aa29e3fe52","toSide":"left"},
		{"id":"06ba3eaf5005b377","fromNode":"60491c010c72f8a8","fromSide":"bottom","toNode":"cb26c113eabbd56c","toSide":"top"}
	]
}